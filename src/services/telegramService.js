const { Telegraf } = require('telegraf');
const axios = require('axios');

class TelegramService {
  constructor(configManager, logger) {
    this.configManager = configManager;
    this.logger = logger;
    this.bot = null;
  }

  initialize() {
    const config = this.configManager.loadConfig();

    if (!config.telegram.botToken) {
      throw new Error('Telegram bot token not provided in config');
    }

    this.bot = new Telegraf(config.telegram.botToken);
    this.logger.info('Telegram bot initialized');
  }

  async sendPost(post, channelId, username) {
    try {
      let caption = `üì∏ –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç @${username}\n\n`;

      if (post.caption) {
        caption += `${post.caption}\n\n`;
      }

      caption += `üîó ${post.url}`;

      if (post.carouselMedia && post.carouselMedia.length > 1) {
        await this.sendCarousel(post.carouselMedia, channelId, caption);
      } else if (post.mediaType === 2 && post.videoVersions.length > 0) {
        await this.sendVideo(post.videoVersions[0].url, channelId, caption);
      } else if (post.imageVersions.length > 0) {
        await this.sendPhoto(post.imageVersions[0].url, channelId, caption);
      } else {
        await this.bot.telegram.sendMessage(channelId, caption);
      }

      this.logger.info(`Post sent to channel ${channelId}`);
    } catch (error) {
      this.logger.error(`Failed to send post to ${channelId}:`, error.message);
      throw error;
    }
  }

  async sendStory(story, channelId, username) {
    try {
      let caption = `üìñ –ù–æ–≤–∞—è —Å—Ç–æ—Ä–∏—Å –æ—Ç @${username}\n\n`;
      caption += `üîó ${story.url}`;

      if (story.mediaType === 2 && story.videoVersions.length > 0) {
        await this.sendVideo(story.videoVersions[0].url, channelId, caption);
      } else if (story.imageVersions.length > 0) {
        await this.sendPhoto(story.imageVersions[0].url, channelId, caption);
      } else {
        await this.bot.telegram.sendMessage(channelId, caption);
      }

      this.logger.info(`Story sent to channel ${channelId}`);
    } catch (error) {
      this.logger.error(`Failed to send story to ${channelId}:`, error.message);
      throw error;
    }
  }

  async sendPhoto(photoUrl, channelId, caption) {
    try {
      const response = await axios.get(photoUrl, { responseType: 'stream' });

      await this.bot.telegram.sendPhoto(channelId, {
        source: response.data
      }, {
        caption: caption,
        parse_mode: 'HTML'
      });
    } catch (error) {
      this.logger.error(`Failed to send photo:`, error.message);
      await this.bot.telegram.sendMessage(channelId, `${caption}\n\nüì∑ –§–æ—Ç–æ: ${photoUrl}`);
    }
  }

  async sendVideo(videoUrl, channelId, caption) {
    try {
      const response = await axios.get(videoUrl, { responseType: 'stream' });

      await this.bot.telegram.sendVideo(channelId, {
        source: response.data
      }, {
        caption: caption,
        parse_mode: 'HTML'
      });
    } catch (error) {
      this.logger.error(`Failed to send video:`, error.message);
      await this.bot.telegram.sendMessage(channelId, `${caption}\n\nüé¨ –í–∏–¥–µ–æ: ${videoUrl}`);
    }
  }

  async sendCarousel(carouselMedia, channelId, caption) {
    try {
      const mediaGroup = [];

      for (let i = 0; i < Math.min(carouselMedia.length, 10); i++) {
        const media = carouselMedia[i];

        if (media.image_versions2?.candidates?.length > 0) {
          const response = await axios.get(media.image_versions2.candidates[0].url, { responseType: 'stream' });

          mediaGroup.push({
            type: 'photo',
            media: { source: response.data },
            caption: i === 0 ? caption : undefined
          });
        } else if (media.video_versions?.length > 0) {
          const response = await axios.get(media.video_versions[0].url, { responseType: 'stream' });

          mediaGroup.push({
            type: 'video',
            media: { source: response.data },
            caption: i === 0 ? caption : undefined
          });
        }
      }

      if (mediaGroup.length > 0) {
        await this.bot.telegram.sendMediaGroup(channelId, mediaGroup);
      } else {
        await this.bot.telegram.sendMessage(channelId, caption);
      }
    } catch (error) {
      this.logger.error(`Failed to send carousel:`, error.message);
      await this.bot.telegram.sendMessage(channelId, caption);
    }
  }

  async sendMessage(chatId, message) {
    try {
      await this.bot.telegram.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
      this.logger.error(`Failed to send message to ${chatId}:`, error.message);
      throw error;
    }
  }

  setupAdminCommands(monitoringService) {
    const config = this.configManager.loadConfig();
    const adminUserId = config.telegram.adminUserId;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    this.bot.telegram.setMyCommands([
      { command: 'start', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'add_account', description: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' },
      { command: 'remove_account', description: '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' },
      { command: 'list_accounts', description: 'üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤' },
      { command: 'status', description: 'üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞' }
    ]);

    this.bot.command('start', (ctx) => {
      if (ctx.from.id.toString() === adminUserId) {
        ctx.reply('ü§ñ Instagram Monitor Bot\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add_account - –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n/remove_account - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n/list_accounts - —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞');
      } else {
        ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É');
      }
    });

    this.bot.command('add_account', (ctx) => {
      if (ctx.from.id.toString() !== adminUserId) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      }

      const args = ctx.message.text.split(' ').slice(1);
      if (args.length < 2) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_account <username> <channel_id>\n–ü—Ä–∏–º–µ—Ä: /add_account example_user @my_channel');
      }

      const [username, channelId] = args;

      try {
        this.configManager.addAccount(username, channelId);
        ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç @${username} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);
        this.logger.info(`Account ${username} added by admin ${ctx.from.id}`);
      } catch (error) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ${error.message}`);
      }
    });

    this.bot.command('remove_account', (ctx) => {
      if (ctx.from.id.toString() !== adminUserId) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      }

      const args = ctx.message.text.split(' ').slice(1);
      if (args.length < 1) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_account <username>\n–ü—Ä–∏–º–µ—Ä: /remove_account example_user');
      }

      const username = args[0];

      try {
        this.configManager.removeAccount(username);
        ctx.reply(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç @${username} —É–¥–∞–ª–µ–Ω`);
        this.logger.info(`Account ${username} removed by admin ${ctx.from.id}`);
      } catch (error) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: ${error.message}`);
      }
    });

    this.bot.command('list_accounts', (ctx) => {
      if (ctx.from.id.toString() !== adminUserId) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      }

      try {
        const accounts = this.configManager.getAccounts();

        if (Object.keys(accounts).length === 0) {
          return ctx.reply('üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç');
        }

        let message = 'üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n';

        for (const [username, config] of Object.entries(accounts)) {
          const status = config.enabled ? '‚úÖ' : '‚ùå';
          message += `${status} @${username} ‚Üí ${config.channelId}\n`;
        }

        ctx.reply(message);
      } catch (error) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: ${error.message}`);
      }
    });

    this.bot.command('status', (ctx) => {
      if (ctx.from.id.toString() !== adminUserId) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
      }

      try {
        const status = monitoringService.getStatus();

        let message = `ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n`;
        message += `üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${status.totalAccounts}\n`;
        message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${status.enabledAccounts}\n\n`;

        if (status.totalAccounts > 0) {
          message += `üìã –î–µ—Ç–∞–ª–∏:\n`;
          for (const [username, accountStatus] of Object.entries(status.accounts)) {
            const statusEmoji = accountStatus.enabled ? '‚úÖ' : '‚ùå';
            message += `${statusEmoji} @${username}\n`;
            message += `   –ö–∞–Ω–∞–ª: ${accountStatus.channelId}\n`;
            message += `   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${accountStatus.lastPostId}\n`;
            message += `   –°—Ç–æ—Ä–∏—Å: ${accountStatus.lastStoriesCount}\n\n`;
          }
        }

        ctx.reply(message);
      } catch (error) {
        ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
      }
    });
  }

  start() {
    this.bot.launch();
    this.logger.info('Telegram bot started');
  }

  stop() {
    if (this.bot) {
      this.bot.stop();
      this.logger.info('Telegram bot stopped');
    }
  }
}

module.exports = TelegramService;